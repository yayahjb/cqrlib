#
#  Makefile
#  CQRlib
#
#  Created by Herbert J. Bernstein on 02/22/09.
#  Copyright 2009 Herbert J. Bernstein. All rights reserved.
#
#

#  Work supported in part by NIH NIGMS under grant 1R15GM078077-01 and DOE 
#  under grant ER63601-1021466-0009501.  Any opinions, findings, and 
#  conclusions or recommendations expressed in this material are those of the   
#  author(s) and do not necessarily reflect the views of the funding agencies.


#**********************************************************************
#*                                                                    *
#* YOU MAY REDISTRIBUTE THE CQRlib API UNDER THE TERMS OF THE LGPL    *
#*                                                                    *
#**********************************************************************/

#************************* LGPL NOTICES *******************************
#*                                                                    *
#* This library is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU Lesser General Public         *
#* License as published by the Free Software Foundation; either       *
#* version 2.1 of the License, or (at your option) any later version. *
#*                                                                    *
#* This library is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
#* Lesser General Public License for more details.                    *
#*                                                                    *
#* You should have received a copy of the GNU Lesser General Public   *
#* License along with this library; if not, write to the Free         *
#* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,    *
#* MA  02110-1301  USA                                                *
#*                                                                    *
#**********************************************************************/

# Version string
VERSION = 3:0:1
RELEASE = @PACKAGE_VERSION@

#
# Compiler and compilation flags
#
CC = @CC@
CXX = @CXX@
CFLAGS  = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
CPPFLAGS = @CPPFLAGS@
WARNINGS = -Wall -ansi -pedantic
LDFLAGS = @LDFLAGS@

# Build directory
top_builddir = @top_builddir@

#
# libtool path if system default is not suitable
#
LIBTOOL = @LIBTOOL@

#
# If local headers must be quoted uncomment the next line
#
#USE_LOCAL_HEADERS = 1

#
# Directories
#
LIB      = $(top_builddir)/lib
BIN      = $(top_builddir)/bin
SRC      = $(top_builddir)
INC      = $(top_builddir)
EXAMPLES = $(top_builddir)
TESTDATA = $(top_builddir)

prefix := @prefix@
exec_prefix := @exec_prefix@

LIBDIR := @libdir@
INCDIR := @includedir@

#
# Include directories
#
ifdef USE_LOCAL_HEADERS
INCLUDES = -DUSE_LOCAL_HEADERS
else
INCLUDES = -I$(INC)
endif

COMPILE_C = $(CC) -std=c90 $(WARNINGS) $(CPPFLAGS) $(CFLAGS)
COMPILE_CXX = $(CXX) -std=c++98 $(WARNINGS) $(CPPFLAGS) -DCQR_NOCCODE=1 $(CXXFLAGS)

COMPILE_COMMAND         =  $(LIBTOOL) --mode=compile $(COMPILE_C) $(INCLUDES) -c
LIBRARY_LINK_COMMAND    =  $(LIBTOOL) --mode=link $(CC) -version-info $(VERSION) -rpath $(LIBDIR) $(LDFLAGS)
BUILD_COMMAND_LOCAL     =  $(LIBTOOL) --mode=link $(COMPILE_C) $(INCLUDES)
BUILD_COMMAND_DYNAMIC   =  $(LIBTOOL) --mode=link $(COMPILE_C) -shared $(INCLUDES)
BUILD_COMMAND_STATIC    =  $(LIBTOOL) --mode=link $(COMPILE_C) -static $(INCLUDES)
CPPCOMPILE_COMMAND      =  $(LIBTOOL) --mode=compile $(COMPILE_CXX) $(INCLUDES) -c
CPPLIBRARY_LINK_COMMAND =  $(LIBTOOL) --mode=link $(CXX) -version-info $(VERSION) -rpath $(LIBDIR) $(LDFLAGS)
CPPBUILD_COMMAND_LOCAL  =  $(LIBTOOL) --mode=link $(COMPILE_CXX) $(INCLUDES)
CPPBUILD_COMMAND_DYNAMIC=  $(LIBTOOL) --mode=link $(COMPILE_CXX) -shared $(INCLUDES)
CPPBUILD_COMMAND_STATIC =  $(LIBTOOL) --mode=link $(COMPILE_CXX) -static $(INCLUDES)
INSTALL_COMMAND         =  $(LIBTOOL) --mode=install cp
INSTALL_FINISH_COMMAND  =  $(LIBTOOL) --mode=finish

OBJ_EXT                =  lo
LIB_EXT                =  la

######################################################################
#  You should not need to make modifications below this line         #
######################################################################

#
# Suffixes of files to be used or built
#
.SUFFIXES:	.c .$(OBJ_EXT) .$(LIB_EXT)

#
# Common dependencies
#
COMMONDEP = Makefile

#
# Source files
#
SOURCE   =  $(SRC)/cqrlib.c

#
# Header files
#
HEADERS   =  $(INC)/cqrlib.h

# Default: instructions
#
default:
	@echo ' '
	@echo '***************************************************************'
	@echo ' '
	@echo ' PLEASE READ README_CQRlib.txt and lgpl.txt'
	@echo ' '
	@echo ' Before making the CQRlib library and example programs, check'
	@echo ' that the chosen settings are correct'
	@echo ' '
	@echo ' The current C and C++ compile commands are:'
	@echo ' '
	@echo '   $(COMPILE_COMMAND)'
	@echo '   $(CPPCOMPILE_COMMAND)'
	@echo ' '
	@echo ' The current library C and C++ link commands are:'
	@echo ' '
	@echo '   $(LIBRARY_LINK_COMMAND)'
	@echo '   $(CPPLIBRARY_LINK_COMMAND)'
	@echo ' '
	@echo ' The current C library local, dynamic and static build commands are:'
	@echo ' '
	@echo '   $(BUILD_COMMAND_LOCAL)'
	@echo '   $(BUILD_COMMAND_DYNAMIC)'
	@echo '   $(BUILD_COMMAND_STATIC)'
	@echo ' '
	@echo ' The current C++ template local, dynamic and static build commands are:'
	@echo ' '
	@echo '   $(CPPBUILD_COMMAND_LOCAL)'
	@echo '   $(CPPBUILD_COMMAND_DYNAMIC)'
	@echo '   $(CPPBUILD_COMMAND_STATIC)'
	@echo ' '
	@echo ' Before installing the CQRlib library and example programs, check'
	@echo ' that the install directory and install commands are correct:'
	@echo ' '
	@echo ' The current values are :'
	@echo ' '
	@echo '   $(DESTDIR) '
	@echo '   $(INSTALL_COMMAND) '
	@echo '   $(INSTALL_FINISH) '
	@echo ' '
	@echo ' To compile the CQRlib library and example programs type:'
	@echo ' '
	@echo '   make clean'
	@echo '   make all'
	@echo ' '
	@echo ' To run a set of tests type:'
	@echo ' '
	@echo '   make tests'
	@echo ' '
	@echo ' To clean up the directories type:'
	@echo ' '
	@echo '   make clean'
	@echo ' '
	@echo ' To install the library and binaries type:'
	@echo ' '
	@echo '   make install'
	@echo ' '
	@echo '***************************************************************'
	@echo ' '

#
# Compile the library and examples
#
all:	$(LIB)/.tag $(BIN)/.tag $(SOURCE) $(HEADERS) \
		$(LIB)/libCQRlib.$(LIB_EXT) \
		$(BIN)/CQRlibTest $(BIN)/CPPQRTest
		
install:  all $(LIB)/libCQRlib.$(LIB_EXT) $(INC)/cqrlib.h
		  @mkdir -p $(DESTDIR)$(INCDIR)
		  @mkdir -p $(DESTDIR)$(LIBDIR)
		  $(INSTALL_COMMAND) $(LIB)/libCQRlib.$(LIB_EXT) $(DESTDIR)$(LIBDIR)/libCQRlib.$(LIB_EXT)
		  $(INSTALL_FINISH_COMMAND) $(DESTDIR)$(LIBDIR)/libCQRlib.$(LIB_EXT)
		  cp $(INC)/cqrlib.h $(DESTDIR)$(INCDIR)/cqrlib.h
		  chmod 644 $(DESTDIR)$(INCDIR)/cqrlib.h
		  echo "Testing final install dynamic"
		  $(BUILD_COMMAND_DYNAMIC)  $(EXAMPLES)/CQRlibTest.c \
		  $(LIB)/libCQRlib.la -lm -o $(BIN)/CQRlibTest_dynamic
		  $(BIN)/CQRlibTest_dynamic > $(TESTDATA)/CQRlibTest_dynamic.lst
		  diff -b -c $(TESTDATA)/CQRlibTest_orig.lst \
		    $(TESTDATA)/CQRlibTest_dynamic.lst
		  echo "Testing final install static"
		  $(BUILD_COMMAND_STATIC) $(EXAMPLES)/CQRlibTest.c \
		   $(LIB)/libCQRlib.la -lm -o $(BIN)/CQRlibTest_static
		  $(BIN)/CQRlibTest_static > $(TESTDATA)/CQRlibTest_static.lst
		  diff -b -c $(TESTDATA)/CQRlibTest_orig.lst \
		    $(TESTDATA)/CQRlibTest_static.lst
		  $(CPPBUILD_COMMAND_DYNAMIC) $(EXAMPLES)/CPPQRTest.cpp \
		    -lm -o $(BIN)/CPPQRTest_dynamic
		  $(BIN)/CPPQRTest_dynamic > $(TESTDATA)/CPPQRTest_dynamic.lst
		  diff -b -c $(TESTDATA)/CPPQRTest_orig.lst \
		    $(TESTDATA)/CPPQRTest_dynamic.lst
		  $(CPPBUILD_COMMAND_STATIC) $(EXAMPLES)/CPPQRTest.cpp \
		    -lm -o $(BIN)/CPPQRTest_static
	      $(BIN)/CPPQRTest_static > $(TESTDATA)/CPPQRTest_static.lst
		  diff -b -c $(TESTDATA)/CPPQRTest_orig.lst \
		    $(TESTDATA)/CPPQRTest_static.lst
			
		  
		  
#
# Directories
#
$(LIB)/.tag:
	mkdir $(LIB)
	@touch $@

$(BIN)/.tag:
	mkdir $(BIN)
	@touch $@

#
# CQRlib library
#
$(LIB)/libCQRlib.$(LIB_EXT): $(SOURCE) $(HEADERS) $(COMMONDEP)
	$(COMPILE_COMMAND) -c $(SOURCE)
	$(LIBRARY_LINK_COMMAND) -o $(LIB)/libCQRlib.$(LIB_EXT) *.$(OBJ_EXT) 

#
# CQRlibTest example program
#
$(BIN)/CQRlibTest: $(LIB)/libCQRlib.$(LIB_EXT) $(EXAMPLES)/CQRlibTest.c 
	$(BUILD_COMMAND_LOCAL) $(EXAMPLES)/CQRlibTest.c $(LIB)/libCQRlib.$(LIB_EXT) -lm \
		      -o $@

#
# CPPQRTest example program
#
$(BIN)/CPPQRTest: $(EXAMPLES)/CPPQRTest.cpp
	$(CPPBUILD_COMMAND_LOCAL) $(EXAMPLES)/CPPQRTest.cpp -lm \
		      -o $@

#
# Tests
#
tests:		$(LIB) $(BIN) $(BIN)/CQRlibTest \
				all $(TESTDATA)/CQRlibTest_orig.lst $(TESTDATA)/CPPQRTest_orig.lst
			$(BIN)/CQRlibTest > $(TESTDATA)/CQRlibTest.lst
			diff -b -c $(TESTDATA)/CQRlibTest_orig.lst \
				$(TESTDATA)/CQRlibTest.lst
			$(BIN)/CPPQRTest > $(TESTDATA)/CPPQRTest.lst
			diff -b -c $(TESTDATA)/CPPQRTest_orig.lst \
				$(TESTDATA)/CPPQRTest.lst
			

#
# Remove all non-source files
#
empty:
		  @-rm -rf $(LIB)
		  @-rm -rf $(BIN)
		  @-rm -f $(TESTDATA)/CQRlibTest.lst
		  @-rm -f $(TESTDATA)/CQRlibTest_static.lst
		  @-rm -f $(TESTDATA)/CQRlibTest_dynamic.lst
		  @-rm -f $(TESTDATA)/CPPQRTest.lst
		  @-rm -f $(TESTDATA)/CPPQRTest_static.lst
		  @-rm -f $(TESTDATA)/CPPQRTest_dynamic.lst
		  
#
# Remove temporary files
#
clean:
	@-rm -f core 
	@-rm -f *.o
	@-rm -f *.$(OBJ_EXT)
	@-rm -f *.c.*

#
# Restore to distribution state
#
distclean:	clean empty





